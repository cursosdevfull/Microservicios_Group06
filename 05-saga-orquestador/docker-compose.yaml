version: "3.8"

services:
  RABBITMQ:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - net_broker

  MONGO:
    container_name: mongo
    image: mongo:3.6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - mongo_host:/data/db
    networks:
      - net_broker
    healthcheck:
      test: 'mongo --eval db.getSiblingDB("admin").runCommand({ping: 1})'
      interval: 30s
      timeout: 10s
      retries: 3

  ORDER:
    container_name: order
    build:
      context: .
      dockerfile: order/Dockerfile
    image: order_ms
    restart: always
    depends_on:
      - RABBITMQ
      - MONGO
    ports:
      - "8080:3000"
    environment:
      - MONGO_HOST=MONGO
      - MONGO_PORT=27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=root
      - MONGO_DATABASE=order
      - MONGO_AUTH_SOURCE=admin
      - PORT=3000
      - RABBIT_HOST=RABBITMQ
    networks:
      - net_broker

  PAYMENT:
    container_name: payment
    build:
      context: .
      dockerfile: payment/Dockerfile
    image: payment_ms
    restart: always
    depends_on:
      - RABBITMQ
      - MONGO
    ports:
      - "8081:3001"
    environment:
      - MONGO_HOST=MONGO
      - MONGO_PORT=27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=root
      - MONGO_DATABASE=payment
      - MONGO_AUTH_SOURCE=admin
      - PORT=3001
      - RABBIT_HOST=RABBITMQ
    networks:
      - net_broker

  STORE:
    container_name: store
    build:
      context: .
      dockerfile: store/Dockerfile
    image: store_ms
    restart: always
    depends_on:
      - RABBITMQ
      - MONGO
    ports:
      - "8082:3002"
    environment:
      - MONGO_HOST=MONGO
      - MONGO_PORT=27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=root
      - MONGO_DATABASE=store
      - MONGO_AUTH_SOURCE=admin
      - PORT=3002
      - RABBIT_HOST=RABBITMQ
    networks:
      - net_broker

  DELIVERY:
    container_name: delivery
    build:
      context: .
      dockerfile: delivery/Dockerfile
    image: delivery_ms
    restart: always
    depends_on:
      - RABBITMQ
      - MONGO
    ports:
      - "8083:3003"
    environment:
      - MONGO_HOST=MONGO
      - MONGO_PORT=27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=root
      - MONGO_DATABASE=delivery
      - MONGO_AUTH_SOURCE=admin
      - PORT=3003
      - RABBIT_HOST=RABBITMQ
    networks:
      - net_broker

  ORCHESTATOR:
    container_name: orchestator
    build:
      context: .
      dockerfile: orquestador/Dockerfile
    image: orquestador_ms
    restart: always
    depends_on:
      - RABBITMQ
    ports:
      - "8084:3004"
    environment:
      - PORT=3004
      - RABBIT_HOST=RABBITMQ
    networks:
      - net_broker
volumes:
  mongo_host:

networks:
  net_broker:
